// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fetcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FetchererClient is the client API for Fetcherer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchererClient interface {
	Fetcher(ctx context.Context, in *FetcherRequest, opts ...grpc.CallOption) (*FetcherReply, error)
}

type fetchererClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchererClient(cc grpc.ClientConnInterface) FetchererClient {
	return &fetchererClient{cc}
}

func (c *fetchererClient) Fetcher(ctx context.Context, in *FetcherRequest, opts ...grpc.CallOption) (*FetcherReply, error) {
	out := new(FetcherReply)
	err := c.cc.Invoke(ctx, "/fetcher.Fetcherer/Fetcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchererServer is the server API for Fetcherer service.
// All implementations must embed UnimplementedFetchererServer
// for forward compatibility
type FetchererServer interface {
	Fetcher(context.Context, *FetcherRequest) (*FetcherReply, error)
	mustEmbedUnimplementedFetchererServer()
}

// UnimplementedFetchererServer must be embedded to have forward compatible implementations.
type UnimplementedFetchererServer struct {
}

func (UnimplementedFetchererServer) Fetcher(context.Context, *FetcherRequest) (*FetcherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetcher not implemented")
}
func (UnimplementedFetchererServer) mustEmbedUnimplementedFetchererServer() {}

// UnsafeFetchererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchererServer will
// result in compilation errors.
type UnsafeFetchererServer interface {
	mustEmbedUnimplementedFetchererServer()
}

func RegisterFetchererServer(s grpc.ServiceRegistrar, srv FetchererServer) {
	s.RegisterService(&Fetcherer_ServiceDesc, srv)
}

func _Fetcherer_Fetcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchererServer).Fetcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetcher.Fetcherer/Fetcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchererServer).Fetcher(ctx, req.(*FetcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fetcherer_ServiceDesc is the grpc.ServiceDesc for Fetcherer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fetcherer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fetcher.Fetcherer",
	HandlerType: (*FetchererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetcher",
			Handler:    _Fetcherer_Fetcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fetcher.proto",
}
